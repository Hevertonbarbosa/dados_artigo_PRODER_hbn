colnames(data_result) = c("data", "area")
# Loop para acessar cada imagem, separarando data e área alagada.
for (i in 1:nfiles) { #i=1
name_i <- files_Path[i]
namei_split <- strsplit(name_i, split = "_")[[1]]
date = namei_split[4]
image <- EBImage::readImage(paste0(url_images, name_i))
data_result[i,] <- para.image(date,image,resolucao = 900)# image_transformed
}
#View(data_result)
#write.csv(data_result, file = "Results/1.areas.csv",row.names = F)
# Análise dados área
summary(data_result$area)
boxplot(data_result$area)
# BoxPlot Anual
boxplotgrouparea
### 2ª Etapa: Modelagem dos dados. ####
## Transformando o data frame em series temporais.
dados.ts<-ts(data_result$area, frequency = 12, start = 2013)
dados.ts
plot(dados.ts, ylab="Área alagada em m²", xlab="Tempo")
## Transformar dados a partir da aplicação do log
transformada_ts = ts(log(data_result$area), frequency = 12, start = 2013)
plot(transformada_ts, ylab="Log da área alagada", xlab="Tempo")#, main= "Série temporal")
## Decompor a série temporal
decomparea=decompose(transformada_ts)
plot(decompose(transformada_ts), xlab="Tempo")
## Separar série temporal em conjuntos de treinamento teste
perc_train = 0.9
indice_train = round(perc_train*length(transformada_ts))
train_ts = transformada_ts[1:indice_train]
test_ts = transformada_ts[(indice_train+1):length(transformada_ts)]
# Plotar gráfico do split train/test
plot.ts(c(train_ts, test_ts), lwd=1, ylab="Log da área alagada"
, xlab="Índice")+
abline(v=indice_train, lwd=2, col="red")
## MODELO ARIMA. ####
model_arima = auto.arima(train_ts, trace = T, seasonal = T #, D=1
, stepwise = F, max.D = 2, start.P = 1)
summary(model_arima)
# Avaliar resíduos ARIMA
#par(mfrow=c(2,2))
#qqnorm(model_arima$residuals,main = "")
#qqline(model_arima$residuals,main = "")
#hist(model_arima$residuals, main = "")
acf(model_arima$residuals, main = "")
pacf(model_arima$residuals, main = "")
shapiro.test(model_arima$residuals) #p > 0,05?
#lillie.test(model_arima$residuals)
auto.arima(model_arima$residuals)
## Previsão com horizonte de tempo igual a 12
previsao_arima = forecast(model_arima, h=12)
#write.csv(previsao_arima,file = "Results/9.previsao.csv",row.names = F)
# Gráfico 1
plot(previsao_arima)
lines(c(rep(NA, indice_train), test_ts), col="red", lwd=1)
previsao_arima
#write.csv(previsao_arima,file = "Results/9.previsao.csv",row.names = F)
# Gráfico 1
plot(previsao_arima)
lines(c(rep(NA, indice_train), test_ts), col="red", lwd=1)
# png(filename = "Results/10.Previsão_ARIMA.png", width = 1000, height = 500, res = 100)
# plot(previsao_arima)
# lines(c(rep(NA, indice_train), test_ts), col="red", lwd=1)
# dev.off()
# Gráfico 2
previsao_real_12_arima = exp(previsao_arima$mean)
#write.csv(previsao_real_12_arima,file = "Results/11.previsao_12_arima.csv",row.names = F)
teste_real =  exp(test_ts)
previsao_real_12_arima
plot(teste_real, type = "l", lwd=2, xlab="Conjunto de teste"
, ylab="Área alagada", ylim=c(min(teste_real, previsao_real_12_arima)
, 1.1*max(teste_real, previsao_real_12_arima)))
lines(as.numeric(previsao_real_12_arima), col="red", lwd=2)
legend("bottomright", c("Observações", "ARIMA"), col=c(1,2)
, lwd=c(2,2), box.col = "white", inset = 0.01)
## MODELO SARIMA.####
train_ts_2 = ts(train_ts, start = c(2013,2),frequency = 12)
model_sarima = auto.arima(train_ts_2, trace = T, seasonal = T
, stepwise = F, max.D = 2, start.P = 1)
summary(model_sarima)
# Avaliar resíduos SARIMA
#par(mfrow=c(2,2))
#qqnorm(model_sarima$residuals,main = "")
#qqline(model_sarima$residuals,main = "")
#hist(model_sarima$residuals, main = "")
acf(model_sarima$residuals, main = "")
pacf(model_sarima$residuals, main = "")
shapiro.test(model_sarima$residuals) #p > 0,05?
#lillie.test(model_sarima$residuals)
auto.arima(model_sarima$residuals)
## Previsão com horizonte de tempo igual a 12
previsao_sarima = forecast(model_sarima, h=12)
#write.csv(previsao_sarima,file = "Results/14.previsao_sarima.csv",row.names = F)
# Gráfico 1
plot(previsao_sarima)
lines(c(rep(NA, indice_train), test_ts), col="red", lwd=1)
lines(c(rep(NA, indice_train), test_ts), col="red", lwd=1)
# png(filename = "Results/15.Previsão_SARIMA.png", width = 1000, height = 500, res = 100)
# plot(previsao_sarima)
# lines(c(rep(NA, indice_train), test_ts), col="red", lwd=1)
# dev.off()
# Gráfico 2
previsao_real_12_sarima = exp(previsao_sarima$mean)
previsao_real_12_sarima
previsao_real_12_arima
plot(teste_real, type = "l", lwd=2, xlab="Conjunto de teste"
, ylab="Área alagada", ylim=c(min(teste_real, previsao_real_12_sarima)
, 1.1*max(teste_real, previsao_real_12_sarima)))
lines(as.numeric(previsao_real_12_sarima), col="red", lwd=2)
legend("bottomright", c("Observações", "SARIMA"), col=c(1,2)
, lwd=c(2,2), box.col = "white", inset = 0.01)
plot(teste_real, type = "l", lwd=2, xlab="Conjunto de teste"
, ylab="Área alagada", ylim=c(min(teste_real, previsao_real_12_sarima)
, 1.1*max(teste_real, previsao_real_12_sarima)))
lines(as.numeric(previsao_real_12_sarima), col="red", lwd=2)
legend("bottomright", c("Observações", "SARIMA"), col=c(1,2)
, lwd=c(2,2), box.col = "white", inset = 0.01)
teste_real
previsao_real_12_arima
previsao_real_12_sarima
previsao_real_12_ets
## MODELO ETS. ####
#Utilizando os dados ETS com sazonalidade 12, temos:
model_ets = ets(train_ts_2)
summary(model_ets)
# Avaliar resíduos ETS
#par(mfrow=c(2,2))#Quadro com 4 gráficos
#qqnorm(model_ets$residuals)
#qqline(model_ets$residuals)
#hist(model_ets$residuals)
acf(model_ets$residuals)
pacf(model_ets$residuals)
shapiro.test(model_ets$residuals)
auto.arima(model_ets$residuals)
## Previsão com horizonte de tempo igual a 12 - ETS
previsao_ets = forecast(model_ets, h=12)
#write.csv(previsao_ets,file = "Results/19.previsao_ets.csv",row.names = F)
# Gráfico 1
plot(previsao_ets)
lines(c(rep(NA, indice_train), test_ts), col="red", lwd=1)
# png(filename = "Results/20.Previsão_ets.png", width = 1000, height = 500, res = 100)
# plot(previsao_ets)
# lines(c(rep(NA, indice_train), test_ts), col="red", lwd=1)
# dev.off()
# Gráfico 2
previsao_real_12_ets = exp(previsao_ets$mean)
plot(teste_real, type = "l", lwd=2, xlab="Conjunto de teste"
, ylab="Área alagada", ylim=c(min(teste_real, previsao_real_12_ets)
, 1.1*max(teste_real, previsao_real_12_ets)))
lines(as.numeric(previsao_real_12_ets), col="red", lwd=2)
legend("bottomright", c("Observações", "ETS"), col=c(1,2)
, lwd=c(2,2), box.col = "white", inset = 0.01)
## HOLTWINTERS. ####
# Viu-se a possibilidade de melhoria do modelo ETS.
# Para isto, utilizamos a função de Holtwinters.
#train_ts_2 = ts(train_ts, start = c(2013,2),frequency = 12)
model_hw = HoltWinters(train_ts_2)
model_hw
# Análise de Resíduos
error = model_hw$x-model_hw$fitted[,1]
plot(error)
#par(mfrow=c(2,2))#Quadro com 4 gráficos
#qqnorm(error)
#qqline(error)
#hist(error)
acf(error)
pacf(error)
shapiro.test(error)
auto.arima(error)
#PREVISÃO
pred_hw = predict(model_hw, n.ahead = length(test_ts))
previsao_hw_12 = exp(pred_hw)
#write.csv(previsao_hw_12,file = "Results/25.previsao_hw_12.csv",row.names = F)
plot.ts(test_ts)
lines(as.numeric(pred_hw), col = 2)
legend("bottomright", c("Observações", "HOLT"), col=c(1,2)
, lwd=c(2,2), box.col = "white", inset = 0.01)
rmse_arima = getRMSE(teste_real, previsao_real_12_arima);rmse_arima
rmse_sarima = getRMSE(teste_real, previsao_real_12_sarima);rmse_sarima
rmse_ets = getRMSE(teste_real, previsao_real_12_ets);rmse_ets
rmse_hw = getRMSE(teste_real, previsao_hw_12);rmse_hw
mape_arima = getMAPE(teste_real, previsao_real_12_arima);mape_arima
mape_sarima = getMAPE(teste_real, previsao_real_12_sarima);mape_sarima
mape_ets = getMAPE(teste_real, previsao_real_12_ets);mape_ets
mape_hw = getMAPE(teste_real, previsao_hw_12);mape_hw
theil_arima = getTheil(teste_real, previsao_real_12_arima);theil_arima
theil_sarima = getTheil(teste_real, previsao_real_12_sarima);theil_sarima
theil_ets = getTheil(teste_real, previsao_real_12_ets);theil_ets
theil_hw = getTheil(teste_real, previsao_hw_12);theil_hw
model_final = HoltWinters(transformada_ts
, alpha = model_hw$alpha
, beta = model_hw$beta
, gamma = model_hw$gamma)
previsao_final = predict(model_final
, n.ahead = 12
, prediction.interval = T
, level = 0.95)
previsao_final = exp(previsao_final)
#png(filename = "Results/33.Previsão_final.png", width = 1000, height = 500, res = 100)
plot(1:12, previsao_final[,1],lwd=2
, xaxt = "n"
, xlab="Tempo", type = "l"
, ylab="Área alagada m²")
eixo_x = c("Dez/22","Jan/23","Fev/23"
,"Mar/23","Abr/23","Mai/23"
,"Jun/23","Jul/23","Ago/23"
,"Set/23","Out/23","nov/23")
axis(1, at = 1:12, labels = eixo_x)
## Intervalo de confiança.
ymax = max(previsao_final)
ymin = min(previsao_final)
#png(filename = "Results/34.Previsão_final.png", width = 1000, height = 500, res = 100)
plot(1:12, previsao_final[,1], ylim = c(ymin, ymax),lwd=2
, xaxt = "n"
, xlab="Tempo", type = "l"
, ylab="Área alagada m²")
eixo_x = c("Dez/22","Jan/23","Fev/23"
,"Mar/23","Abr/23","Mai/23"
,"Jun/23","Jul/23","Ago/23"
,"Set/23","Out/23","nov/23")
axis(1, at = 1:12, labels = eixo_x)
lines(1:12, previsao_final[,2], lty=2, col="Gray")
lines(1:12, previsao_final[,3], lty=2, col="Gray")
## GRÁFICO COM PREVISÕES ####
teste_real = ts(teste_real, start = c(2022,12), frequency = 12)
previsao_real_12_arima = ts(previsao_real_12_arima, start = c(2022,12), frequency = 12)
previsao_real_12_sarima = ts(previsao_real_12_sarima, start = c(2022,12), frequency = 12)
previsao_real_12_ets = ts(previsao_real_12_ets, start = c(2022,12), frequency = 12)
pred_hw = exp(pred_hw)
pred_hw = ts(pred_hw, start = c(2022,12), frequency = 12)
ymax = max(c(teste_real, previsao_real_12_arima
, previsao_real_12_sarima
, previsao_real_12_ets
, pred_hw))
ymin = min(c(teste_real
, previsao_real_12_arima
, previsao_real_12_sarima
, pred_hw))
#png(filename = "Results/27.Previsoes.png", width = 1000, height = 500, res = 100)
plot.ts(teste_real, ylim = c(ymin, ymax*1.05), lwd=2
, xlab="Conjunto de teste"
, ylab="Área alagada")
#ARIMA
lines(previsao_real_12_arima, col = "Red", lwd=2)
points(previsao_real_12_arima, col = "Red", pch=16)
#SARIMA
lines(previsao_real_12_sarima, col = "Blue", lwd=2)
points(previsao_real_12_sarima, col = "Blue", pch=17)
#ETS
lines(previsao_real_12_ets, col = "Orange", lwd=2)
points(previsao_real_12_ets, col = "Orange", pch=18)
#HOLT
lines(pred_hw, col = "Darkgreen", lwd=2)
points(pred_hw, col = "Darkgreen", pch=19)
legend("top", c("TS", "ARIMA", "SARIMA", "ETS", "HOLTWINTERS")
, col = c('Black', 'Red', 'Blue', 'Orange', 'Darkgreen')
, lwd = 2, pch = c(NA,16,17,18,19)
, horiz = T, cex = 0.75, inset = 0.03)
teste_real
previsao_real_12_arima
previsao_real_12_sarima
previsao_real_12_ets
pred_hw
dados_prev_model = read.csv2('Data/dados_previsao_modelos.csv')
dados_prev_model$modelo <- as.factor(dados_prev_model$modelo)
boxplotgroupmodel = ggplot(data = dados_previsao_modelos,aes(x = modelo,y = area)) +
geom_errorbar(stat = "boxplot", width = 0.2) +
geom_boxplot(width = 0.6, fill = "grey90",
outlier.shape = 1, outlier.size = 2) +
labs(y = "Área alagada", x = "Modelo") +
theme_classic()
dados_prev_model = read.csv2('Data/dados_prev_model.csv')
dados_prev_model$modelo <- as.factor(dados_prev_model$modelo)
boxplotgroupmodel = ggplot(data = dados_prev_model,aes(x = modelo,y = area)) +
geom_errorbar(stat = "boxplot", width = 0.2) +
geom_boxplot(width = 0.6, fill = "grey90",
outlier.shape = 1, outlier.size = 2) +
labs(y = "Área alagada", x = "Modelo") +
theme_classic()
boxplotgroupmodel
#if(!require("readr")) install.packages("readr")
#if(!require("ggplot2")) install.packages("ggplot2")
#setwd("C:/Users/Heverton/OneDrive/Mestrado UFCA/Disciplinas/00_Projeto_de_pesquisa/Modelagem")
dados_ano = read.csv2('Data/dados_ano.csv')
dados_ano$ano <- as.factor(dados_ano$ano)
boxplotgrouparea = ggplot(data = dados_ano,aes(x = ano,y = area)) +
geom_errorbar(stat = "boxplot", width = 0.2) +
geom_boxplot(width = 0.6, fill = "grey90",
outlier.shape = 1, outlier.size = 2) +
labs(y = "Área alagada", x = "Ano") +
theme_classic()
boxplotgrouparea
dados_prev_model = read.csv2('Data/dados_prev_model.csv')
dados_prev_model$modelo <- as.factor(dados_prev_model$modelo)
boxplotgroupmodel = ggplot(data = dados_prev_model,aes(x = modelo,y = area)) +
geom_errorbar(stat = "boxplot", width = 0.2) +
geom_boxplot(width = 0.6, fill = "grey90",
outlier.shape = 1, outlier.size = 2) +
labs(y = "Área alagada", x = "Modelo") +
theme_classic()
boxplotgroupmodel
dados_prev_model = read.csv2('Data/dados_prev_model.csv')
dados_prev_model$modelo <- as.factor(dados_prev_model$modelo)
boxplotgroupmodel = ggplot(data = dados_prev_model,aes(x = modelo,y = area)) +
geom_errorbar(stat = "boxplot", width = 0.2) +
geom_boxplot(width = 0.6, fill = "grey90",
outlier.shape = 1, outlier.size = 2) +
labs(y = "Área alagada", x = "Modelo") +
theme_classic()
boxplotgroupmodel
#if(!require("readr")) install.packages("readr")
#if(!require("ggplot2")) install.packages("ggplot2")
#setwd("C:/Users/Heverton/OneDrive/Mestrado UFCA/Disciplinas/00_Projeto_de_pesquisa/Modelagem")
dados_ano = read.csv2('Data/dados_ano.csv')
dados_ano$ano <- as.factor(dados_ano$ano)
boxplotgrouparea = ggplot(data = dados_ano,aes(x = ano,y = area)) +
geom_errorbar(stat = "boxplot", width = 0.2) +
geom_boxplot(width = 0.6, fill = "grey90",
outlier.shape = 1, outlier.size = 2) +
labs(y = "Área alagada", x = "Ano") +
theme_classic()
boxplotgrouparea
png(filename = "Results/33.Prev_Model.png", width = 1000, height = 500, res = 100)
dados_prev_model = read.csv2('Data/dados_prev_model.csv')
dados_prev_model$modelo <- as.factor(dados_prev_model$modelo)
boxplotgroupmodel = ggplot(data = dados_prev_model,aes(x = modelo,y = area)) +
geom_errorbar(stat = "boxplot", width = 0.2) +
geom_boxplot(width = 0.6, fill = "grey90",
outlier.shape = 1, outlier.size = 2) +
labs(y = "Área alagada", x = "Modelo") +
theme_classic()
boxplotgroupmodel
dev.off()
png(filename = "Results/27.Previsoes.png", width = 1000, height = 500, res = 100)
plot.ts(teste_real, ylim = c(ymin, ymax*1.05), lwd=2
, xlab="Conjunto de teste"
, ylab="Área alagada")
#ARIMA
lines(previsao_real_12_arima, col = "Red", lwd=2)
points(previsao_real_12_arima, col = "Red", pch=16)
#SARIMA
lines(previsao_real_12_sarima, col = "Blue", lwd=2)
points(previsao_real_12_sarima, col = "Blue", pch=17)
#ETS
lines(previsao_real_12_ets, col = "Orange", lwd=2)
points(previsao_real_12_ets, col = "Orange", pch=18)
#HOLT
lines(pred_hw, col = "Darkgreen", lwd=2)
points(pred_hw, col = "Darkgreen", pch=19)
legend("top", c("TS", "ARIMA", "SARIMA", "ETS", "HOLTWINTERS")
, col = c('Black', 'Red', 'Blue', 'Orange', 'Darkgreen')
, lwd = 2, pch = c(NA,16,17,18,19)
, horiz = T, cex = 0.75, inset = 0.03)
dev.off()
png(filename = "Results/33.Prev_Model.png", width = 1000, height = 500, res = 100)
dados_prev_model = read.csv2('Data/dados_prev_model.csv')
dados_prev_model$modelo <- as.factor(dados_prev_model$modelo)
boxplotgroupmodel = ggplot(data = dados_prev_model,aes(x = modelo,y = area)) +
geom_errorbar(stat = "boxplot", width = 0.2) +
geom_boxplot(width = 0.6, fill = "grey90",
outlier.shape = 1, outlier.size = 2) +
labs(y = "Área alagada", x = "Modelo") +
theme_classic()
boxplotgroupmodel
dev.off()
png(filename = "Results/33.Prev_Model.png", width = 1000, height = 500, res = 100)
dados_prev_model = read.csv2('Data/dados_prev_model.csv')
dados_prev_model$modelo <- as.factor(dados_prev_model$modelo)
boxplotgroupmodel = ggplot(data = dados_prev_model,aes(x = modelo,y = area)) +
geom_errorbar(stat = "boxplot", width = 0.2) +
geom_boxplot(width = 0.6, fill = "grey90",
outlier.shape = 1, outlier.size = 2) +
labs(y = "Área alagada", x = "Modelo") +
theme_classic()
boxplotgroupmodel
dev.off()
#if(!require("readr")) install.packages("readr")
#if(!require("ggplot2")) install.packages("ggplot2")
#setwd("C:/Users/Heverton/OneDrive/Mestrado UFCA/Disciplinas/00_Projeto_de_pesquisa/Modelagem")
png(filename = "Results/3.boxplot_area.png", width = 1000, height = 500, res = 100)
dados_ano = read.csv2('Data/dados_ano.csv')
dados_ano$ano <- as.factor(dados_ano$ano)
boxplotgrouparea = ggplot(data = dados_ano,aes(x = ano,y = area)) +
geom_errorbar(stat = "boxplot", width = 0.2) +
geom_boxplot(width = 0.6, fill = "grey90",
outlier.shape = 1, outlier.size = 2) +
labs(y = "Área alagada em m²", x = "Ano") +
theme_classic()
boxplotgrouparea
dev.off()
source("R/Boxplotmodelos.R") #Função para boxplot modelos.
Boxplotmodelos
Boxplotmodelos
boxplotgroupmodel
## MODELO ARIMA. ####
model_arima = auto.arima(train_ts, trace = T, seasonal = T #, D=1
, stepwise = F, max.D = 2, start.P = 1)
summary(model_arima)
# Avaliar resíduos ARIMA
#par(mfrow=c(2,2))
#qqnorm(model_arima$residuals,main = "")
#qqline(model_arima$residuals,main = "")
#hist(model_arima$residuals, main = "")
acf(model_arima$residuals, main = "")
pacf(model_arima$residuals, main = "")
shapiro.test(model_arima$residuals) #p > 0,05?
#lillie.test(model_arima$residuals)
auto.arima(model_arima$residuals)
## Previsão com horizonte de tempo igual a 12
previsao_arima = forecast(model_arima, h=12)
#write.csv(previsao_arima,file = "Results/9.previsao.csv",row.names = F)
# Gráfico 1
plot(previsao_arima)
lines(c(rep(NA, indice_train), test_ts), col="red", lwd=1)
# png(filename = "Results/10.Previsão_ARIMA.png", width = 1000, height = 500, res = 100)
# plot(previsao_arima)
# lines(c(rep(NA, indice_train), test_ts), col="red", lwd=1)
# dev.off()
# Gráfico 2
previsao_real_12_arima = exp(previsao_arima$mean)
#write.csv(previsao_real_12_arima,file = "Results/11.previsao_12_arima.csv",row.names = F)
teste_real =  exp(test_ts)
plot(teste_real, type = "l", lwd=2, xlab="Conjunto de teste"
, ylab="Área alagada", ylim=c(min(teste_real, previsao_real_12_arima)
, 1.1*max(teste_real, previsao_real_12_arima)))
lines(as.numeric(previsao_real_12_arima), col="red", lwd=2)
legend("bottomright", c("Observações", "ARIMA"), col=c(1,2)
, lwd=c(2,2), box.col = "white", inset = 0.01)
## MODELO SARIMA.####
train_ts_2 = ts(train_ts, start = c(2013,2),frequency = 12)
model_sarima = auto.arima(train_ts_2, trace = T, seasonal = T
, stepwise = F, max.D = 2, start.P = 1)
summary(model_sarima)
# Avaliar resíduos SARIMA
#par(mfrow=c(2,2))
#qqnorm(model_sarima$residuals,main = "")
#qqline(model_sarima$residuals,main = "")
#hist(model_sarima$residuals, main = "")
acf(model_sarima$residuals, main = "")
pacf(model_sarima$residuals, main = "")
shapiro.test(model_sarima$residuals) #p > 0,05?
#lillie.test(model_sarima$residuals)
auto.arima(model_sarima$residuals)
## Previsão com horizonte de tempo igual a 12
previsao_sarima = forecast(model_sarima, h=12)
#write.csv(previsao_sarima,file = "Results/14.previsao_sarima.csv",row.names = F)
# Gráfico 1
plot(previsao_sarima)
lines(c(rep(NA, indice_train), test_ts), col="red", lwd=1)
# png(filename = "Results/15.Previsão_SARIMA.png", width = 1000, height = 500, res = 100)
# plot(previsao_sarima)
# lines(c(rep(NA, indice_train), test_ts), col="red", lwd=1)
# dev.off()
# Gráfico 2
previsao_real_12_sarima = exp(previsao_sarima$mean)
plot(teste_real, type = "l", lwd=2, xlab="Conjunto de teste"
, ylab="Área alagada", ylim=c(min(teste_real, previsao_real_12_sarima)
, 1.1*max(teste_real, previsao_real_12_sarima)))
lines(as.numeric(previsao_real_12_sarima), col="red", lwd=2)
legend("bottomright", c("Observações", "SARIMA"), col=c(1,2)
, lwd=c(2,2), box.col = "white", inset = 0.01)
## MODELO ETS. ####
#Utilizando os dados ETS com sazonalidade 12, temos:
model_ets = ets(train_ts_2)
summary(model_ets)
# Avaliar resíduos ETS
#par(mfrow=c(2,2))#Quadro com 4 gráficos
#qqnorm(model_ets$residuals)
#qqline(model_ets$residuals)
#hist(model_ets$residuals)
acf(model_ets$residuals)
pacf(model_ets$residuals)
shapiro.test(model_ets$residuals)
auto.arima(model_ets$residuals)
#AUTOCORRELAÇÃO PARCIAL. ####
par(mfrow=c(2,2))#Quadro com 4 gráficos
pacf(model_arima$residuals, main = "ARIMA")
pacf(model_sarima$residuals, main = "SARIMA")
pacf(model_ets$residuals, main = "ETS")
pacf(error, main = "HOLTWINTERS")
#AUTOCORRELAÇÃO PARCIAL. ####
png(filename = "Results/34.CORRELOGRAMAS.png", width = 1000, height = 500, res = 100)
par(mfrow=c(2,2))#Quadro com 4 gráficos
pacf(model_arima$residuals, main = "ARIMA")
pacf(model_sarima$residuals, main = "SARIMA")
pacf(model_ets$residuals, main = "ETS")
pacf(error, main = "HOLTWINTERS")
dev.off()
png(filename = "Results/33.Prev_Model.png", width = 1000, height = 500, res = 100)
dados_prev_model = read.csv2('Data/dados_prev_model.csv')
dados_prev_model$modelo <- as.factor(dados_prev_model$modelo)
boxplotgroupmodel = ggplot(data = dados_prev_model,aes(x = modelo,y = area)) +
geom_errorbar(stat = "boxplot", width = 0.2) +
geom_boxplot(width = 0.6, fill = "grey90",
outlier.shape = 1, outlier.size = 2) +
labs(y = "Área alagada em m²", x = "Modelo") +
theme_classic()
boxplotgroupmodel
dev.off()
rmse_arima = getRMSE(teste_real, previsao_real_12_arima);rmse_arima
rmse_sarima = getRMSE(teste_real, previsao_real_12_sarima);rmse_sarima
rmse_ets = getRMSE(teste_real, previsao_real_12_ets);rmse_ets
rmse_hw = getRMSE(teste_real, previsao_hw_12);rmse_hw
mape_arima = getMAPE(teste_real, previsao_real_12_arima);mape_arima
mape_sarima = getMAPE(teste_real, previsao_real_12_sarima);mape_sarima
mape_ets = getMAPE(teste_real, previsao_real_12_ets);mape_ets
mape_hw = getMAPE(teste_real, previsao_hw_12);mape_hw
theil_arima = getTheil(teste_real, previsao_real_12_arima);theil_arima
theil_sarima = getTheil(teste_real, previsao_real_12_sarima);theil_sarima
theil_ets = getTheil(teste_real, previsao_real_12_ets);theil_ets
theil_hw = getTheil(teste_real, previsao_hw_12);theil_hw
